/* ==========================================================================
   Helper
   ========================================================================== */

/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
@mixin font-size($font-size, $line-height:true) {
    font-size: $font-size;
    font-size: ($font-size / $base-font-size) * 1rem;
    @if $line-height == true {
        line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    }
}

/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * s
 * sm
 * m
 * ml
 * l
 * xl
 * xxl
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */
@mixin media-query($media-query){
    @if $media-query == s{
        @media only screen and (max-width:$end-s) { @content; }
    }

    @if $media-query == sm{
        @media only screen and (max-width:$end-sm) { @content; }
    }

    @if $media-query == m{
        @media only screen and (max-width:$end-m) { @content; }
    }

    @if $media-query == ml{
        @media only screen and (max-width:$end-ml) { @content; }
    }

    @if $media-query == l{
        @media only screen and (max-width:$end-l) { @content; }
    }

    @if $media-query == xl{
        @media only screen and (max-width:$end-xl) { @content; }
    }

    @if $media-query == xxl{
        @media only screen and (max-width:$end-xxl) { @content; }
    }
}

/**
 * Hide content, also provide
 * breakpoint specific hidden elements.
 */
@mixin hidden {
    display: none !important;
    visibility: hidden !important;
}

/**
 * Contain floats
 *
 * Make an element expand to contain floated children.
 * Uses pseudo-elements (micro clearfix).
 *
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of the
 *    element.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */

%u-cf:before,
%u-cf:after {
    content: " "; /* 1 */
    display: table; /* 2 */
}

%u-cf:after {
    clear: both;
}

/*
 * Image replacement
 */

%ir,
.ir {
    text-indent: 100%;
    white-space: nowrap;
    overflow: hidden !important;
}

/*
 * Hidden helper
 */

@each $state in s, sm, m, ml, l, xl, xxl {
    @include media-query(#{$state}) {
        .hidden--#{$state} {
            @include hidden;
        }
    }
}
